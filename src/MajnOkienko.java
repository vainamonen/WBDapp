
import java.awt.Color;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.*;
//import tabelki.KodPocztowy;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Mehehe
 */
public class MajnOkienko extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public MajnOkienko() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JTP = new javax.swing.JTabbedPane();
        JTLogowanie = new javax.swing.JPanel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        JTAdres = new javax.swing.JPanel();
        jBAdresWyswietl = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTabAdresView = new javax.swing.JTable();
        JTKodPocztowy = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTabKodPocztowyView = new javax.swing.JTable();
        jBKodPocztowyWyswietl = new javax.swing.JButton();
        jBKodPocztowyNewNowy = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        JTabKodPocztowyNew = new javax.swing.JTable();
        jBKodPocztowyNewWstaw = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        JTabKodPocztowyEdit = new javax.swing.JTable();
        jTFKodPocztowyEdit = new javax.swing.JTextField();
        jBKodPocztowyEditWczytaj = new javax.swing.JButton();
        jBKodPocztowyEditWstaw = new javax.swing.JButton();
        JTKontrahent = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTabKontrahentView = new javax.swing.JTable();
        jBKontrahentView = new javax.swing.JButton();
        JTLadunek = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTabLadunekView = new javax.swing.JTable();
        jBLadunekView = new javax.swing.JButton();
        JTModel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTabModelView = new javax.swing.JTable();
        jBModelView = new javax.swing.JButton();
        JTOddzial = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTabOddzialView = new javax.swing.JTable();
        jBOddzialView = new javax.swing.JButton();
        JTPojazd = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTabPojazdView = new javax.swing.JTable();
        jBPojazdView = new javax.swing.JButton();
        JTPracownik = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTabPracownikView = new javax.swing.JTable();
        jBPracownikView = new javax.swing.JButton();
        JTSaldo = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTabSaldoView = new javax.swing.JTable();
        jBSaldoView = new javax.swing.JButton();
        JTStatus = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTabStatusView = new javax.swing.JTable();
        jBStatusView = new javax.swing.JButton();
        JTTypTowaru = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTabTypTowaruView = new javax.swing.JTable();
        jBTypTowaruView = new javax.swing.JButton();
        JTWydatek = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTabWydatekView = new javax.swing.JTable();
        jBWydatekView = new javax.swing.JButton();
        JTZlecenie = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTabZlecenieView = new javax.swing.JTable();
        jBZlecenieView = new javax.swing.JButton();
        jTUsuwanie = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jTFUsuwane = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Spedytor");
        setMinimumSize(new java.awt.Dimension(600, 400));
        setPreferredSize(new java.awt.Dimension(1000, 850));

        JTP.setBackground(new java.awt.Color(255, 153, 0));
        JTP.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        JTP.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        JTP.setDoubleBuffered(true);
        JTP.setMinimumSize(new java.awt.Dimension(800, 600));

        jPasswordField1.setText("Hasło");

        jTextField1.setText("Login");

        jLabel1.setText("Login");

        jLabel2.setText("Hasło");

        jButton1.setText("Zaloguj");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JTLogowanieLayout = new javax.swing.GroupLayout(JTLogowanie);
        JTLogowanie.setLayout(JTLogowanieLayout);
        JTLogowanieLayout.setHorizontalGroup(
            JTLogowanieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTLogowanieLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JTLogowanieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(JTLogowanieLayout.createSequentialGroup()
                        .addGroup(JTLogowanieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(JTLogowanieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))))
                .addContainerGap(460, Short.MAX_VALUE))
        );
        JTLogowanieLayout.setVerticalGroup(
            JTLogowanieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTLogowanieLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(JTLogowanieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JTLogowanieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(440, Short.MAX_VALUE))
        );

        JTP.addTab("LOGOWANIE", JTLogowanie);

        jBAdresWyswietl.setText("Wyświetl");
        jBAdresWyswietl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAdresWyswietlActionPerformed(evt);
            }
        });

        jTabAdresView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTabAdresView);

        javax.swing.GroupLayout JTAdresLayout = new javax.swing.GroupLayout(JTAdres);
        JTAdres.setLayout(JTAdresLayout);
        JTAdresLayout.setHorizontalGroup(
            JTAdresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
            .addComponent(jBAdresWyswietl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JTAdresLayout.setVerticalGroup(
            JTAdresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTAdresLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBAdresWyswietl)
                .addContainerGap())
        );

        JTP.addTab("ADRES", JTAdres);

        JTabKodPocztowyView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(JTabKodPocztowyView);

        jBKodPocztowyWyswietl.setText("Wyświetl");
        jBKodPocztowyWyswietl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBKodPocztowyWyswietlActionPerformed(evt);
            }
        });

        jBKodPocztowyNewNowy.setText("Nowy");
        jBKodPocztowyNewNowy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBKodPocztowyNewNowyActionPerformed(evt);
            }
        });

        JTabKodPocztowyNew.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(JTabKodPocztowyNew);

        jBKodPocztowyNewWstaw.setText("Wstaw");
        jBKodPocztowyNewWstaw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBKodPocztowyNewWstawActionPerformed(evt);
            }
        });

        JTabKodPocztowyEdit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(JTabKodPocztowyEdit);

        jTFKodPocztowyEdit.setText("ID edytowanego");
        jTFKodPocztowyEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFKodPocztowyEditActionPerformed(evt);
            }
        });

        jBKodPocztowyEditWczytaj.setText("Wczytaj");
        jBKodPocztowyEditWczytaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBKodPocztowyEditWczytajActionPerformed(evt);
            }
        });

        jBKodPocztowyEditWstaw.setText("Wstaw");
        jBKodPocztowyEditWstaw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBKodPocztowyEditWstawActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JTKodPocztowyLayout = new javax.swing.GroupLayout(JTKodPocztowy);
        JTKodPocztowy.setLayout(JTKodPocztowyLayout);
        JTKodPocztowyLayout.setHorizontalGroup(
            JTKodPocztowyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane3)
            .addGroup(JTKodPocztowyLayout.createSequentialGroup()
                .addGroup(JTKodPocztowyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBKodPocztowyWyswietl)
                    .addGroup(JTKodPocztowyLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jBKodPocztowyNewNowy)
                        .addGap(18, 18, 18)
                        .addComponent(jBKodPocztowyNewWstaw))
                    .addGroup(JTKodPocztowyLayout.createSequentialGroup()
                        .addComponent(jTFKodPocztowyEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBKodPocztowyEditWczytaj)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBKodPocztowyEditWstaw)))
                .addGap(0, 454, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        JTKodPocztowyLayout.setVerticalGroup(
            JTKodPocztowyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTKodPocztowyLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBKodPocztowyWyswietl)
                .addGap(67, 67, 67)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JTKodPocztowyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBKodPocztowyNewNowy)
                    .addComponent(jBKodPocztowyNewWstaw))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JTKodPocztowyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFKodPocztowyEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBKodPocztowyEditWczytaj)
                    .addComponent(jBKodPocztowyEditWstaw))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        JTP.addTab("KOD POCZTOWY", JTKodPocztowy);

        jTabKontrahentView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(jTabKontrahentView);

        jBKontrahentView.setText("Wyświetl");
        jBKontrahentView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBKontrahentViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JTKontrahentLayout = new javax.swing.GroupLayout(JTKontrahent);
        JTKontrahent.setLayout(JTKontrahentLayout);
        JTKontrahentLayout.setHorizontalGroup(
            JTKontrahentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
            .addComponent(jBKontrahentView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JTKontrahentLayout.setVerticalGroup(
            JTKontrahentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTKontrahentLayout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBKontrahentView)
                .addGap(0, 311, Short.MAX_VALUE))
        );

        JTP.addTab("KONTRAHENT", JTKontrahent);

        jTabLadunekView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(jTabLadunekView);

        jBLadunekView.setText("Wyświetl");
        jBLadunekView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLadunekViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JTLadunekLayout = new javax.swing.GroupLayout(JTLadunek);
        JTLadunek.setLayout(JTLadunekLayout);
        JTLadunekLayout.setHorizontalGroup(
            JTLadunekLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
            .addComponent(jBLadunekView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JTLadunekLayout.setVerticalGroup(
            JTLadunekLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTLadunekLayout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBLadunekView)
                .addGap(0, 310, Short.MAX_VALUE))
        );

        JTP.addTab("ŁADUNEK", JTLadunek);

        jTabModelView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(jTabModelView);

        jBModelView.setText("Wyświetl");
        jBModelView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModelViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JTModelLayout = new javax.swing.GroupLayout(JTModel);
        JTModel.setLayout(JTModelLayout);
        JTModelLayout.setHorizontalGroup(
            JTModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
            .addComponent(jBModelView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JTModelLayout.setVerticalGroup(
            JTModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTModelLayout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBModelView)
                .addGap(0, 308, Short.MAX_VALUE))
        );

        JTP.addTab("MODEL", JTModel);

        jTabOddzialView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(jTabOddzialView);

        jBOddzialView.setText("Wyświetl");
        jBOddzialView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBOddzialViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JTOddzialLayout = new javax.swing.GroupLayout(JTOddzial);
        JTOddzial.setLayout(JTOddzialLayout);
        JTOddzialLayout.setHorizontalGroup(
            JTOddzialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
            .addComponent(jBOddzialView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JTOddzialLayout.setVerticalGroup(
            JTOddzialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTOddzialLayout.createSequentialGroup()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBOddzialView)
                .addGap(0, 311, Short.MAX_VALUE))
        );

        JTP.addTab("ODDZIAŁ", JTOddzial);

        jTabPojazdView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(jTabPojazdView);

        jBPojazdView.setText("Wyświetl");
        jBPojazdView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPojazdViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JTPojazdLayout = new javax.swing.GroupLayout(JTPojazd);
        JTPojazd.setLayout(JTPojazdLayout);
        JTPojazdLayout.setHorizontalGroup(
            JTPojazdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
            .addComponent(jBPojazdView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JTPojazdLayout.setVerticalGroup(
            JTPojazdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTPojazdLayout.createSequentialGroup()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBPojazdView)
                .addGap(0, 310, Short.MAX_VALUE))
        );

        JTP.addTab("POJAZD", JTPojazd);

        jTabPracownikView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane10.setViewportView(jTabPracownikView);

        jBPracownikView.setText("Wyświetl");
        jBPracownikView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPracownikViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JTPracownikLayout = new javax.swing.GroupLayout(JTPracownik);
        JTPracownik.setLayout(JTPracownikLayout);
        JTPracownikLayout.setHorizontalGroup(
            JTPracownikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
            .addComponent(jBPracownikView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JTPracownikLayout.setVerticalGroup(
            JTPracownikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTPracownikLayout.createSequentialGroup()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBPracownikView)
                .addGap(0, 310, Short.MAX_VALUE))
        );

        JTP.addTab("PRACOWNIK", JTPracownik);

        jTabSaldoView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane11.setViewportView(jTabSaldoView);

        jBSaldoView.setText("Wyświetl");
        jBSaldoView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSaldoViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JTSaldoLayout = new javax.swing.GroupLayout(JTSaldo);
        JTSaldo.setLayout(JTSaldoLayout);
        JTSaldoLayout.setHorizontalGroup(
            JTSaldoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
            .addComponent(jBSaldoView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JTSaldoLayout.setVerticalGroup(
            JTSaldoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTSaldoLayout.createSequentialGroup()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBSaldoView)
                .addGap(0, 310, Short.MAX_VALUE))
        );

        JTP.addTab("SALDO", JTSaldo);

        jTabStatusView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane12.setViewportView(jTabStatusView);

        jBStatusView.setText("Wyświetl");
        jBStatusView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBStatusViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JTStatusLayout = new javax.swing.GroupLayout(JTStatus);
        JTStatus.setLayout(JTStatusLayout);
        JTStatusLayout.setHorizontalGroup(
            JTStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
            .addComponent(jBStatusView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JTStatusLayout.setVerticalGroup(
            JTStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTStatusLayout.createSequentialGroup()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBStatusView)
                .addGap(0, 310, Short.MAX_VALUE))
        );

        JTP.addTab("STATUS", JTStatus);

        jTabTypTowaruView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(jTabTypTowaruView);

        jBTypTowaruView.setText("Wyświetl");
        jBTypTowaruView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTypTowaruViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JTTypTowaruLayout = new javax.swing.GroupLayout(JTTypTowaru);
        JTTypTowaru.setLayout(JTTypTowaruLayout);
        JTTypTowaruLayout.setHorizontalGroup(
            JTTypTowaruLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
            .addComponent(jBTypTowaruView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JTTypTowaruLayout.setVerticalGroup(
            JTTypTowaruLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTTypTowaruLayout.createSequentialGroup()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBTypTowaruView)
                .addGap(0, 309, Short.MAX_VALUE))
        );

        JTP.addTab("TYP TOWARU", JTTypTowaru);

        jTabWydatekView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane14.setViewportView(jTabWydatekView);

        jBWydatekView.setText("Wyświetl");
        jBWydatekView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBWydatekViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JTWydatekLayout = new javax.swing.GroupLayout(JTWydatek);
        JTWydatek.setLayout(JTWydatekLayout);
        JTWydatekLayout.setHorizontalGroup(
            JTWydatekLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
            .addComponent(jBWydatekView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JTWydatekLayout.setVerticalGroup(
            JTWydatekLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTWydatekLayout.createSequentialGroup()
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBWydatekView)
                .addGap(0, 311, Short.MAX_VALUE))
        );

        JTP.addTab("WYDATEK", JTWydatek);

        jTabZlecenieView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane15.setViewportView(jTabZlecenieView);

        jBZlecenieView.setText("Wyświetl");
        jBZlecenieView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBZlecenieViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JTZlecenieLayout = new javax.swing.GroupLayout(JTZlecenie);
        JTZlecenie.setLayout(JTZlecenieLayout);
        JTZlecenieLayout.setHorizontalGroup(
            JTZlecenieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
            .addComponent(jBZlecenieView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        JTZlecenieLayout.setVerticalGroup(
            JTZlecenieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JTZlecenieLayout.createSequentialGroup()
                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBZlecenieView)
                .addGap(0, 310, Short.MAX_VALUE))
        );

        JTP.addTab("ZLECENIE", JTZlecenie);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ADRES\t", "KOD POCZTOWY", "KONTRAHENT", "ŁADUNEK", "MODEL", "ODDZIAŁ", "POJAZD", "PRACOWNIK", "SALDO", "STATUS", "TYP TOWARU", "WYDATEK", "ZLECENIE", " " }));

        jTFUsuwane.setText("ID usuwanego");

        jButton2.setText("Usuń");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jTUsuwanieLayout = new javax.swing.GroupLayout(jTUsuwanie);
        jTUsuwanie.setLayout(jTUsuwanieLayout);
        jTUsuwanieLayout.setHorizontalGroup(
            jTUsuwanieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jTUsuwanieLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jTUsuwanieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jTUsuwanieLayout.createSequentialGroup()
                        .addComponent(jTFUsuwane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(498, Short.MAX_VALUE))
        );
        jTUsuwanieLayout.setVerticalGroup(
            jTUsuwanieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jTUsuwanieLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jTUsuwanieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFUsuwane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap(535, Short.MAX_VALUE))
        );

        JTP.addTab("USUWANIE", jTUsuwanie);

        JTP.setSelectedComponent(JTLogowanie);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JTP, javax.swing.GroupLayout.DEFAULT_SIZE, 810, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JTP, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String log, pass;
        log = jTextField1.getText();
        pass = new String(jPasswordField1.getPassword());
        Map<String, String> users= new HashMap<>();
        users.put("admin", "admin");
        users.put("flota", "flota");
        users.put("zlecenie", "zlecenie");
        users.put("szef", "szef");
        String res = users.get(log);
        if( res == null)
        {
            jLabel3.setText("Nie znaleziono użytkownika");
            jLabel3.setForeground(Color.red);
            JTP.setEnabled(false);
        }
        else
        {
            if(res.equals(pass))
            {
                
                
                jLabel3.setText("Zalogowano");
                jLabel3.setForeground(Color.green);
                //wczytywanie wszystkiego z bazy
                jBAdresWyswietlActionPerformed(evt);
                jBKodPocztowyWyswietlActionPerformed(evt);
                jBKontrahentViewActionPerformed(evt);
                jBLadunekViewActionPerformed(evt);
                jBModelViewActionPerformed(evt);
                jBOddzialViewActionPerformed(evt);
                jBPojazdViewActionPerformed(evt);
                jBPracownikViewActionPerformed(evt);
                jBSaldoViewActionPerformed(evt);
                jBStatusViewActionPerformed(evt);
                jBTypTowaruViewActionPerformed(evt);
                jBWydatekViewActionPerformed(evt);
                jBZlecenieViewActionPerformed(evt);
                JTP.setEnabled(true);
                if(res.equals("admin"))
                {
                    //wszystko
                }
                else if(res.equals("flota"))
                {
                    //tylko zarządzenie pojazdami i encjami podrzędnymi
                }
                else if(res.equals("zlecenie"))
                {
                    //tylko zlecenia
                }
                else if(res.equals("szef"))
                {
                    //wyłączyć całą edycję, może tylko oglądać
                }
                
            }
            else
            {
                jLabel3.setText("Złe hasło");
                jLabel3.setForeground(Color.red);
                JTP.setEnabled(false);
            }
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jBKodPocztowyWyswietlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBKodPocztowyWyswietlActionPerformed
       String query = "from KodPocztowy";
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = KodPocztowy.getKolumny();
        Vector tableData = new Vector();
        

    for(Object o : resultList) {
        KodPocztowy foteczka = (KodPocztowy)o;
        
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdKoduPoczt());
        oneRow.add(foteczka.getKodPocztowy());
        oneRow.add(foteczka.getMiasto());
        //oneRow.add(foteczka.getAdreses());
        
        tableData.addElement(oneRow);
    }
    
    JTabKodPocztowyView.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }});
    } catch (HibernateException he) {
        he.printStackTrace();
    }
       }
        
    }//GEN-LAST:event_jBKodPocztowyWyswietlActionPerformed

    private void jBKodPocztowyNewNowyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBKodPocztowyNewNowyActionPerformed
        KodPocztowy foteczka = new KodPocztowy(1, "09200", "Sierpc");
        Vector tableData = new Vector();
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdKoduPoczt());
        oneRow.add(foteczka.getKodPocztowy());
        oneRow.add(foteczka.getMiasto());
        //oneRow.add(foteczka.getAdreses());
        tableData.addElement(oneRow);
        JTabKodPocztowyNew.setModel(new DefaultTableModel(tableData, KodPocztowy.getKolumny())
        {
            @Override
            public boolean isCellEditable(int row, int column) 
            {
                //if(column == 0)
                    //return false;
                return true;
            }
            @Override
            public Class getColumnClass(int col)
            {
                return KodPocztowy.getKlasa(col);
            }
        });
    }//GEN-LAST:event_jBKodPocztowyNewNowyActionPerformed

    private void jBKodPocztowyNewWstawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBKodPocztowyNewWstawActionPerformed
        long id = (long)JTabKodPocztowyNew.getValueAt(0, 0);
        String kod = (String)JTabKodPocztowyNew.getValueAt(0, 1);
        String miasto = (String)JTabKodPocztowyNew.getValueAt(0, 2);
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        
        session.save(new KodPocztowy(id,kod,miasto));
        session.getTransaction().commit();
        jBKodPocztowyWyswietlActionPerformed(null);
    }//GEN-LAST:event_jBKodPocztowyNewWstawActionPerformed

    private void jTFKodPocztowyEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFKodPocztowyEditActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFKodPocztowyEditActionPerformed

    private void jBKodPocztowyEditWczytajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBKodPocztowyEditWczytajActionPerformed
        long id = 0;
        try
        {
            id = Long.parseLong(jTFKodPocztowyEdit.getText());
        }
        catch(Exception e)
        {     
            JOptionPane.showMessageDialog(null, e.toString());
            
            //e.printStackTrace();
        }
        String query = "from KodPocztowy where idKoduPoczt="+id;
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = KodPocztowy.getKolumny();
        Vector tableData = new Vector();
        

        for(Object o : resultList) {
        KodPocztowy foteczka = (KodPocztowy)o;
        
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdKoduPoczt());
        oneRow.add(foteczka.getKodPocztowy());
        oneRow.add(foteczka.getMiasto());
        //oneRow.add(foteczka.getAdreses());
        
        tableData.addElement(oneRow);
    }
    
    JTabKodPocztowyEdit.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
        if(column == 0)
            return false;
       return true;
    }});
    } catch (HibernateException he) {
        he.printStackTrace();
    }
       }
    }//GEN-LAST:event_jBKodPocztowyEditWczytajActionPerformed

    private void jBKodPocztowyEditWstawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBKodPocztowyEditWstawActionPerformed
        try
        {
            long id = (long)JTabKodPocztowyEdit.getValueAt(0, 0);
            String kod = (String)JTabKodPocztowyEdit.getValueAt(0, 1);
            String miasto = (String)JTabKodPocztowyEdit.getValueAt(0, 2);
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();

            session.update(new KodPocztowy(id,kod,miasto));
            session.getTransaction().commit();
        }
        catch(Exception e)
        {
            e.printStackTrace();
            return;
        }
        
        jBKodPocztowyWyswietlActionPerformed(null);
    }//GEN-LAST:event_jBKodPocztowyEditWstawActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int wybor = jComboBox1.getSelectedIndex();
        String idname = "";
        long idnr = 0;
        int ile = 0;
        try
        {
            idnr = Long.parseLong(jTFUsuwane.getText());
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Nie usunięto rekordu.\n"+e.toString());
            return;
        }
        try
        {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();

            if(wybor==0)//adres
            {
                Query q = session.createQuery("delete Adres where idAdresu ="+idnr);
                ile = q.executeUpdate();
            }
            else if(wybor==1)//kod
            {
                Query q = session.createQuery("delete KodPocztowy where idKoduPoczt ="+idnr);
                ile = q.executeUpdate();
            }
            else if(wybor==2)//kontrahent
            {
                Query q = session.createQuery("delete Kontrahent where idKontrahenta ="+idnr);
                ile = q.executeUpdate();
            }
            else if(wybor==3)//ladunek
            {
                Query q = session.createQuery("delete Ladunek where idLadunku ="+idnr);
                ile = q.executeUpdate();
            }
            else if(wybor==4)//model
            {
                Query q = session.createQuery("delete Model where idModelu ="+idnr);
                ile = q.executeUpdate();
            }
            else if(wybor==5)//oddzial
            {
                Query q = session.createQuery("delete Oddzial where idInstytucji ="+idnr);
                ile = q.executeUpdate();
            }
            else if(wybor==6)//pojazd
            {
                Query q = session.createQuery("delete Pojazd where idPojazdu ="+idnr);
                ile = q.executeUpdate();
            }
            else if(wybor==7)//pracownik
            {
                Query q = session.createQuery("delete Pracownik where idPracownika ="+idnr);
                ile = q.executeUpdate();
            }
            else if(wybor==8)//saldo
            {
                Query q = session.createQuery("delete Saldo where idSalda ="+idnr);
                ile = q.executeUpdate();
            }
            else if(wybor==9)//status
            {
                Query q = session.createQuery("delete Status where stan ="+idnr);
                ile = q.executeUpdate();
            }
            else if(wybor==10)//typ
            {
                Query q = session.createQuery("delete TypTowaru where idTypu ="+idnr);
                ile = q.executeUpdate();
            }
            else if(wybor==11)//wydatek
            {
                Query q = session.createQuery("delete Wydatek where idWydatku ="+idnr);
                ile = q.executeUpdate();
            }
            else if(wybor==12)//zlecenie
            {
                Query q = session.createQuery("delete Zlecenie where idZlecenia ="+idnr);
                ile = q.executeUpdate();
            }
            session.getTransaction().commit();
    }
    catch(HibernateException e)
    {
        JOptionPane.showMessageDialog(null, "Jakiś błąd komunikacji z bazą,\nNa przykłąd nie ma obiektu o takim ID\n"+e.toString());
    }
        if(ile ==1)
            JOptionPane.showMessageDialog(null,"Usunięto pomyślnie");
        else
            JOptionPane.showMessageDialog(null,"Nic nie usunięto");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jBAdresWyswietlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAdresWyswietlActionPerformed
        String query = "from Adres";
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = Adres.getKolumny();
        Vector tableData = new Vector();
        

    for(Object o : resultList) {
        Adres foteczka = (Adres)o;
        
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdAdresu());
        oneRow.add(foteczka.getKodPocztowy());
        oneRow.add(foteczka.getUlica());
        oneRow.add(foteczka.getNrDomu());
        oneRow.add(foteczka.getNrLokalu());
        
        tableData.addElement(oneRow);
    }
    
    jTabAdresView.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }});
    //jTabAdresView.getColumnModel().getColumn(0).setPreferredWidth(6);
    } catch (HibernateException he) {
        JOptionPane.showMessageDialog(null, "Jakiś błąd hibernate.\n"+he.toString());
        //he.printStackTrace();
    }
       }
    }//GEN-LAST:event_jBAdresWyswietlActionPerformed

    private void jBKontrahentViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBKontrahentViewActionPerformed
         String query = "from Kontrahent";
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = Kontrahent.getKolumny();
        Vector tableData = new Vector();
        

    for(Object o : resultList) {
        Kontrahent foteczka = (Kontrahent)o;
        
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdKontrahenta());
        oneRow.add(foteczka.getAdres());
        oneRow.add(foteczka.getNip());
        oneRow.add(foteczka.getRegon());
        oneRow.add(foteczka.getNazwa());
        oneRow.add(foteczka.getTelefon());
        oneRow.add(foteczka.getEMail());
        oneRow.add(foteczka.getOpis());
        
        tableData.addElement(oneRow);
    }
    
    jTabKontrahentView.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }});
    } catch (HibernateException he) {
        JOptionPane.showMessageDialog(null, "Jakiś błąd hibernate.\n"+he.toString());
        //he.printStackTrace();
    }
       }
    }//GEN-LAST:event_jBKontrahentViewActionPerformed

    private void jBLadunekViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLadunekViewActionPerformed
        String query = "from Ladunek";
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = Ladunek.getKolumny();
        Vector tableData = new Vector();
        

    for(Object o : resultList) {
        Ladunek foteczka = (Ladunek)o;
        /* private long idLadunku;
     private TypTowaru typTowaru;
     private String nazwa;
     private long ilosc;*/
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdLadunku());
        oneRow.add(foteczka.getTypTowaru());
        oneRow.add(foteczka.getNazwa());
        oneRow.add(foteczka.getIlosc());
        
        tableData.addElement(oneRow);
    }
    
    jTabLadunekView.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }});
    } catch (HibernateException he) {
        JOptionPane.showMessageDialog(null, "Jakiś błąd hibernate.\n"+he.toString());
        //he.printStackTrace();
    }
       }
    }//GEN-LAST:event_jBLadunekViewActionPerformed

    private void jBModelViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModelViewActionPerformed
        String query = "from Model";
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = Model.getKolumny();
        Vector tableData = new Vector();
        

    for(Object o : resultList) {
        Model foteczka = (Model)o;
        /*private long idModelu;
     private TypTowaru typTowaru;
     private String model;
     private String marka;
     private BigDecimal koszt;
     private BigDecimal predkosc;
     private long ladownosc;*/
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdModelu());
        oneRow.add(foteczka.getTypTowaru());
        oneRow.add(foteczka.getModel());
        oneRow.add(foteczka.getMarka());
        oneRow.add(foteczka.getKoszt());
        oneRow.add(foteczka.getPredkosc());
        oneRow.add(foteczka.getLadownosc());
        
        tableData.addElement(oneRow);
    }
    
    jTabModelView.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }});
    } catch (HibernateException he) {
        JOptionPane.showMessageDialog(null, "Jakiś błąd hibernate.\n"+he.toString());
        //he.printStackTrace();
    }
       }
    }//GEN-LAST:event_jBModelViewActionPerformed

    private void jBOddzialViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBOddzialViewActionPerformed
        String query = "from Oddzial";
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = Oddzial.getKolumny();
        Vector tableData = new Vector();
        

    for(Object o : resultList) {
        Oddzial foteczka = (Oddzial)o;
        /*private long idInstytucji;
     private Adres adres;
     private String nazwaInstytucji;*/
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdInstytucji());
        oneRow.add(foteczka.getAdres());
        oneRow.add(foteczka.getNazwaInstytucji());
        
        tableData.addElement(oneRow);
    }
    
    jTabOddzialView.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }});
    } catch (HibernateException he) {
        JOptionPane.showMessageDialog(null, "Jakiś błąd hibernate.\n"+he.toString());
        //he.printStackTrace();
    }
       }
    }//GEN-LAST:event_jBOddzialViewActionPerformed

    private void jBPojazdViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPojazdViewActionPerformed
        String query = "from Pojazd";
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = Pojazd.getKolumny();
        Vector tableData = new Vector();
        

    for(Object o : resultList) {
        Pojazd foteczka = (Pojazd)o;
        /*private long idPojazdu;
     private Model model;
     private String numerRejestracyjny;
     private Date dataPrzegladu;
     private Date dataProdukcji;*/
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdPojazdu());
        oneRow.add(foteczka.getModel());
        oneRow.add(foteczka.getNumerRejestracyjny());
        oneRow.add(foteczka.getDataPrzegladu());
        oneRow.add(foteczka.getDataProdukcji());
        
        tableData.addElement(oneRow);
    }
    
    jTabPojazdView.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }});
    } catch (HibernateException he) {
        JOptionPane.showMessageDialog(null, "Jakiś błąd hibernate.\n"+he.toString());
        //he.printStackTrace();
    }
       }
    }//GEN-LAST:event_jBPojazdViewActionPerformed

    private void jBPracownikViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPracownikViewActionPerformed
        String query = "from Pracownik";
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = Pracownik.getKolumny();
        Vector tableData = new Vector();
        

    for(Object o : resultList) {
        Pracownik foteczka = (Pracownik)o;
        /*private long idPracownika;
     private Adres adres;
     private Oddzial oddzial;
     private String pesel;
     private String imie;
     private String imie2;
     private String nazwisko;
     private Date dataUrodzenia;
     private String stanowisko;
     private String telefon;
     private String status;
     private BigDecimal pensja;*/
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdPracownika());
        oneRow.add(foteczka.getAdres());
        oneRow.add(foteczka.getOddzial());
        oneRow.add(foteczka.getPesel());
        oneRow.add(foteczka.getImie());
        oneRow.add(foteczka.getImie2());
        oneRow.add(foteczka.getNazwisko());
        oneRow.add(foteczka.getDataUrodzenia());
        oneRow.add(foteczka.getStanowisko());
        oneRow.add(foteczka.getTelefon());
        oneRow.add(foteczka.getStatus());
        oneRow.add(foteczka.getPensja());
        tableData.addElement(oneRow);
    }
    
    jTabPracownikView.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }});
    } catch (HibernateException he) {
        JOptionPane.showMessageDialog(null, "Jakiś błąd hibernate.\n"+he.toString());
        //he.printStackTrace();
    }
       }
    }//GEN-LAST:event_jBPracownikViewActionPerformed

    private void jBSaldoViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSaldoViewActionPerformed
        String query = "from Saldo";
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = Saldo.getKolumny();
        Vector tableData = new Vector();
        

    for(Object o : resultList) {
        Saldo foteczka = (Saldo)o;
        /* private long idSalda;
     private Oddzial oddzial;
     private BigDecimal kwota;
     private String informacje;
     private Date dataFaktury;*/
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdSalda());
        oneRow.add(foteczka.getOddzial());
        oneRow.add(foteczka.getKwota());
        oneRow.add(foteczka.getInformacje());
        oneRow.add(foteczka.getDataFaktury());
        
        tableData.addElement(oneRow);
    }
    
    jTabSaldoView.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }});
    } catch (HibernateException he) {
        JOptionPane.showMessageDialog(null, "Jakiś błąd hibernate.\n"+he.toString());
        //he.printStackTrace();
    }
       }
    }//GEN-LAST:event_jBSaldoViewActionPerformed

    private void jBStatusViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBStatusViewActionPerformed
        String query = "from Status";
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = Status.getKolumny();
        Vector tableData = new Vector();
        

    for(Object o : resultList) {
        Status foteczka = (Status)o;
        
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getStan());
        oneRow.add(foteczka.getOpis());
        
        tableData.addElement(oneRow);
    }
    
    jTabStatusView.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }});
    } catch (HibernateException he) {
        JOptionPane.showMessageDialog(null, "Jakiś błąd hibernate.\n"+he.toString());
        //he.printStackTrace();
    }
       }
    }//GEN-LAST:event_jBStatusViewActionPerformed

    private void jBTypTowaruViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTypTowaruViewActionPerformed
        String query = "from TypTowaru";
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = TypTowaru.getKolumny();
        Vector tableData = new Vector();
        

    for(Object o : resultList) {
        TypTowaru foteczka = (TypTowaru)o;
        
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdTypu());
        oneRow.add(foteczka.getTyp());
        
        tableData.addElement(oneRow);
    }
    
    jTabTypTowaruView.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }});
    } catch (HibernateException he) {
        JOptionPane.showMessageDialog(null, "Jakiś błąd hibernate.\n"+he.toString());
        //he.printStackTrace();
    }
       }
    }//GEN-LAST:event_jBTypTowaruViewActionPerformed

    private void jBWydatekViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBWydatekViewActionPerformed
        String query = "from Wydatek";
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = Wydatek.getKolumny();
        Vector tableData = new Vector();
        

    for(Object o : resultList) {
        Wydatek foteczka = (Wydatek)o;
        /* private long idWydatku;
     private Oddzial oddzial;
     private BigDecimal kwota;
     private Date dataWydarzenia;
     private String opis;*/
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdWydatku());
        oneRow.add(foteczka.getOddzial());
        oneRow.add(foteczka.getKwota());
        oneRow.add(foteczka.getDataWydarzenia());
        oneRow.add(foteczka.getOpis());
        
        tableData.addElement(oneRow);
    }
    
    jTabWydatekView.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }});
    } catch (HibernateException he) {
        JOptionPane.showMessageDialog(null, "Jakiś błąd hibernate.\n"+he.toString());
        //he.printStackTrace();
    }
       }
    }//GEN-LAST:event_jBWydatekViewActionPerformed

    private void jBZlecenieViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBZlecenieViewActionPerformed
        String query = "from Zlecenie";
       {
           try {
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        Query q = session.createQuery(query);
        List resultList = q.list();
        //displayResult(resultList);
        session.getTransaction().commit();
        Vector<String> tableHeaders = Zlecenie.getKolumny();
        Vector tableData = new Vector();
        

    for(Object o : resultList) {
        Zlecenie foteczka = (Zlecenie)o;
        /*private BigDecimal idZlecenia;
     private Pojazd pojazd;
     private Adres adresByIdMety;
     private Adres adresByIdStartu;
     private Ladunek ladunek;
     private Pracownik pracownik;
     private Status status;
     private Kontrahent kontrahent;
     private BigDecimal wartosc;
     private BigDecimal odleglosc;
     private Date dataPrzyjZlec;
     private Date dataZakZlec;*/
        Vector<Object> oneRow = new Vector<Object>();
        oneRow.add(foteczka.getIdZlecenia());
        oneRow.add(foteczka.getPojazd());
        oneRow.add(foteczka.getAdresByIdMety());
        oneRow.add(foteczka.getAdresByIdStartu());
        oneRow.add(foteczka.getLadunek());
        oneRow.add(foteczka.getPracownik());
        oneRow.add(foteczka.getStatus());
        oneRow.add(foteczka.getKontrahent());
        oneRow.add(foteczka.getWartosc());
        oneRow.add(foteczka.getOdleglosc());
        oneRow.add(foteczka.getDataPrzyjZlec());
        oneRow.add(foteczka.getDataZakZlec());
                
        tableData.addElement(oneRow);
    }
    
    jTabZlecenieView.setModel(new DefaultTableModel(tableData, tableHeaders){
        public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }});
    } catch (HibernateException he) {
        JOptionPane.showMessageDialog(null, "Jakiś błąd hibernate.\n"+he.toString());
        //he.printStackTrace();
    }
       }
    }//GEN-LAST:event_jBZlecenieViewActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws java.lang.InstantiationException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MajnOkienko.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MajnOkienko.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MajnOkienko.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MajnOkienko().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JTAdres;
    private javax.swing.JPanel JTKodPocztowy;
    private javax.swing.JPanel JTKontrahent;
    private javax.swing.JPanel JTLadunek;
    private javax.swing.JPanel JTLogowanie;
    private javax.swing.JPanel JTModel;
    private javax.swing.JPanel JTOddzial;
    private javax.swing.JTabbedPane JTP;
    private javax.swing.JPanel JTPojazd;
    private javax.swing.JPanel JTPracownik;
    private javax.swing.JPanel JTSaldo;
    private javax.swing.JPanel JTStatus;
    private javax.swing.JPanel JTTypTowaru;
    private javax.swing.JPanel JTWydatek;
    private javax.swing.JPanel JTZlecenie;
    private javax.swing.JTable JTabKodPocztowyEdit;
    private javax.swing.JTable JTabKodPocztowyNew;
    private javax.swing.JTable JTabKodPocztowyView;
    private javax.swing.JButton jBAdresWyswietl;
    private javax.swing.JButton jBKodPocztowyEditWczytaj;
    private javax.swing.JButton jBKodPocztowyEditWstaw;
    private javax.swing.JButton jBKodPocztowyNewNowy;
    private javax.swing.JButton jBKodPocztowyNewWstaw;
    private javax.swing.JButton jBKodPocztowyWyswietl;
    private javax.swing.JButton jBKontrahentView;
    private javax.swing.JButton jBLadunekView;
    private javax.swing.JButton jBModelView;
    private javax.swing.JButton jBOddzialView;
    private javax.swing.JButton jBPojazdView;
    private javax.swing.JButton jBPracownikView;
    private javax.swing.JButton jBSaldoView;
    private javax.swing.JButton jBStatusView;
    private javax.swing.JButton jBTypTowaruView;
    private javax.swing.JButton jBWydatekView;
    private javax.swing.JButton jBZlecenieView;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextField jTFKodPocztowyEdit;
    private javax.swing.JTextField jTFUsuwane;
    private javax.swing.JPanel jTUsuwanie;
    private javax.swing.JTable jTabAdresView;
    private javax.swing.JTable jTabKontrahentView;
    private javax.swing.JTable jTabLadunekView;
    private javax.swing.JTable jTabModelView;
    private javax.swing.JTable jTabOddzialView;
    private javax.swing.JTable jTabPojazdView;
    private javax.swing.JTable jTabPracownikView;
    private javax.swing.JTable jTabSaldoView;
    private javax.swing.JTable jTabStatusView;
    private javax.swing.JTable jTabTypTowaruView;
    private javax.swing.JTable jTabWydatekView;
    private javax.swing.JTable jTabZlecenieView;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
