
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Mehehe
 */
public class ZlecenieAddAndEdit extends javax.swing.JFrame {

    /**
     * Creates new form ZlecenieAddAndEdit
     */
    public ZlecenieAddAndEdit() {
        initComponents();
        Zacznij();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCBCzynność = new javax.swing.JComboBox();
        jCBZlecenie = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jCBPojazd = new javax.swing.JComboBox();
        JCBAdresMeta = new javax.swing.JComboBox();
        JCBAdresStart = new javax.swing.JComboBox();
        jCBŁadunek = new javax.swing.JComboBox();
        jCBPracownik = new javax.swing.JComboBox();
        jCBStatus = new javax.swing.JComboBox();
        jCBKontrahent = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Wybierz czynność");

        jLabel2.setText("Wybierz edytowane zlecenie");

        jCBCzynność.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Dodaj", "Edytuj" }));
        jCBCzynność.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBCzynnośćActionPerformed(evt);
            }
        });

        jCBZlecenie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " " }));
        jCBZlecenie.setEnabled(false);
        jCBZlecenie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBZlecenieActionPerformed(evt);
            }
        });

        jLabel3.setText("Pojazd");

        jCBPojazd.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        JCBAdresMeta.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        JCBAdresStart.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jCBŁadunek.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jCBPracownik.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jCBStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jCBKontrahent.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 153, 0));
        jButton1.setText("Wstaw nowe/edytowane");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Adres docelowy");

        jLabel5.setText("Adres źródłowy");

        jLabel6.setText("Ładunek");

        jLabel7.setText("Pracownik");

        jLabel8.setText("Status");

        jLabel9.setText("Kontrahent");

        jLabel10.setText("Wartość zlecenia");

        jLabel11.setText("Odległość");

        jLabel12.setText("Data przyjęcia zlecenia");

        jLabel13.setText("Data zakończenia zlecenia");

        jCheckBox1.setText("pusta?");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCBCzynność, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
                            .addComponent(jCBPojazd, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField2)
                            .addComponent(JCBAdresMeta, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JCBAdresStart, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCBŁadunek, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCBPracownik, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCBStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCBKontrahent, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1)
                            .addComponent(jCBZlecenie, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBCzynność, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBZlecenie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBPojazd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(JCBAdresMeta)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(JCBAdresStart)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCBŁadunek)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCBPracownik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCBStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCBKontrahent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Session session;
        try
        {
            Zlecenie adr=new Zlecenie();
            if(!Zlecenie.verify(jTextField1.getText(),jTextField2.getText()))
                return;
            if(jCBCzynność.getSelectedIndex()==1 && null!=jCBZlecenie.getSelectedItem())//jeśli edycja
            {
                
                adr.setPojazd((Pojazd)jCBPojazd.getSelectedItem());
                adr.setAdresByIdMety((Adres)JCBAdresMeta.getSelectedItem());
                adr.setAdresByIdStartu((Adres)JCBAdresStart.getSelectedItem());
                adr.setLadunek((Ladunek)jCBŁadunek.getSelectedItem());
                adr.setPracownik((Pracownik)jCBPracownik.getSelectedItem());
                adr.setStatus((Status)jCBStatus.getSelectedItem());
                adr.setKontrahent((Kontrahent)jCBKontrahent.getSelectedItem());
                adr.setWartosc(new BigDecimal(jTextField1.getText()));
                adr.setOdleglosc(new BigDecimal(jTextField2.getText()));
                adr.setDataPrzyjZlec(jDateChooser1.getDate());
                if(jDateChooser2.getDate()!=null)
                    adr.setDataZakZlec(jDateChooser2.getDate());
                
                    
            }
            else if(jCBCzynność.getSelectedIndex()==0)//dodawanie
            {
                adr.setPojazd((Pojazd)jCBPojazd.getSelectedItem());
                adr.setAdresByIdMety((Adres)JCBAdresMeta.getSelectedItem());
                adr.setAdresByIdStartu((Adres)JCBAdresStart.getSelectedItem());
                adr.setLadunek((Ladunek)jCBŁadunek.getSelectedItem());
                adr.setPracownik((Pracownik)jCBPracownik.getSelectedItem());
                adr.setStatus((Status)jCBStatus.getSelectedItem());
                adr.setKontrahent((Kontrahent)jCBKontrahent.getSelectedItem());
                adr.setWartosc(new BigDecimal(jTextField1.getText()));
                adr.setOdleglosc(new BigDecimal(jTextField2.getText()));
                adr.setDataPrzyjZlec(jDateChooser1.getDate());
                if(jDateChooser2.getDate()!=null)
                    adr.setDataZakZlec(jDateChooser2.getDate());
            }
            
            session = HibernateUtil.getSessionFactory().getCurrentSession();
            session.beginTransaction();

            session.saveOrUpdate(adr);
            
            //session.close();

            
        }
        catch(HibernateException ex)
        {
            JOptionPane.showMessageDialog(null, "Jakiś błąd hibernate\n"+ex.toString());
            return;
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Jakiś błąd inny\n"+ex.toString());
            return;
        }
        JOptionPane.showMessageDialog(null,"Transakcja przebiegła pomyślnie");
        session.getTransaction().commit();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        if(jCheckBox1.isSelected())
            jDateChooser2.setDate(null);
        else
            jDateChooser2.setDate(new Date());
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCBCzynnośćActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBCzynnośćActionPerformed
        if(jCBCzynność.getSelectedIndex()==0)//dodaj
        {
            jCBZlecenie.setEnabled(false);
            jCBZlecenie.removeAllItems();
            jTextField1.setText("");
        }
        else if(jCBCzynność.getSelectedIndex()==1)//edytuj
        {
            String query = "from Zlecenie";
            {
                try 
                {
                    Session session = HibernateUtil.getSessionFactory().getCurrentSession();
                    session.beginTransaction();
                    Query q = session.createQuery(query);
                    List resultList = q.list();
                    //displayResult(resultList);
                    
                    //List<KodPocztowy> kody = new ArrayList<>();
                    //session.close();
                    jCBZlecenie.removeAllItems();
                    jCBZlecenie.setEnabled(true);
                    for(Object o : resultList) 
                    {
                        Zlecenie adr = (Zlecenie)o;
                        //kody.add(kod);
                        jCBZlecenie.addItem(adr);
                    }
                    
                    //session.getTransaction().commit();


                } 
                catch (HibernateException he) 
                {
                    he.printStackTrace();
                }
           }
        }   
    }//GEN-LAST:event_jCBCzynnośćActionPerformed

    private void jCBZlecenieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBZlecenieActionPerformed
        Zlecenie adr = (Zlecenie)jCBZlecenie.getSelectedItem();
        if(adr==null)
            return;
        jTextField1.setText(adr.getWartosc().toString());
        jTextField2.setText(adr.getOdleglosc().toString());
        jDateChooser1.setDate(adr.getDataPrzyjZlec());
        if(adr.getDataZakZlec()!=null)
            jDateChooser2.setDate(adr.getDataZakZlec());
        else
        {
            jDateChooser2.setDate(null);
            jCheckBox1.setSelected(true);
        }
        {
            Pojazd kp = adr.getPojazd();
            for(int i=0; i<jCBPojazd.getItemCount();i++)
            {
                Pojazd kp2= (Pojazd)jCBPojazd.getItemAt(i);
                if(kp2.getIdPojazdu()==kp.getIdPojazdu())
                    jCBPojazd.setSelectedIndex(i);
            }
        }
        {
            Adres kp = adr.getAdresByIdMety();
            for(int i=0; i<JCBAdresMeta.getItemCount();i++)
            {
                Adres kp2= (Adres)JCBAdresMeta.getItemAt(i);
                if(kp2.getIdAdresu()==kp.getIdAdresu())
                    JCBAdresMeta.setSelectedIndex(i);
            }
        }
        {
            Adres kp = adr.getAdresByIdStartu();
            for(int i=0; i<JCBAdresStart.getItemCount();i++)
            {
                Adres kp2= (Adres)JCBAdresStart.getItemAt(i);
                if(kp2.getIdAdresu()==kp.getIdAdresu())
                    JCBAdresStart.setSelectedIndex(i);
            }
        }
        {
            Ladunek kp = adr.getLadunek();
            for(int i=0; i<jCBŁadunek.getItemCount();i++)
            {
                Ladunek kp2= (Ladunek)jCBŁadunek.getItemAt(i);
                if(kp2.getIdLadunku()==kp.getIdLadunku())
                    jCBŁadunek.setSelectedIndex(i);
            }
        }
        {
            Pracownik kp = adr.getPracownik();
            for(int i=0; i<jCBPracownik.getItemCount();i++)
            {
                Pracownik kp2= (Pracownik)jCBPracownik.getItemAt(i);
                if(kp2.getIdPracownika()==kp.getIdPracownika())
                    jCBPracownik.setSelectedIndex(i);
            }
        }
        {
            Status kp = adr.getStatus();
            for(int i=0; i<jCBStatus.getItemCount();i++)
            {
                Status kp2= (Status)jCBStatus.getItemAt(i);
                if(kp2.getStan()==kp.getStan())
                    jCBStatus.setSelectedIndex(i);
            }
        }
        {
            Kontrahent kp = adr.getKontrahent();
            for(int i=0; i<jCBKontrahent.getItemCount();i++)
            {
                Kontrahent kp2= (Kontrahent)jCBKontrahent.getItemAt(i);
                if(kp2.getIdKontrahenta()==kp.getIdKontrahenta())
                    jCBKontrahent.setSelectedIndex(i);
            }
        }
    }//GEN-LAST:event_jCBZlecenieActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ZlecenieAddAndEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ZlecenieAddAndEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ZlecenieAddAndEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZlecenieAddAndEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ZlecenieAddAndEdit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox JCBAdresMeta;
    private javax.swing.JComboBox JCBAdresStart;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jCBCzynność;
    private javax.swing.JComboBox jCBKontrahent;
    private javax.swing.JComboBox jCBPojazd;
    private javax.swing.JComboBox jCBPracownik;
    private javax.swing.JComboBox jCBStatus;
    private javax.swing.JComboBox jCBZlecenie;
    private javax.swing.JComboBox jCBŁadunek;
    private javax.swing.JCheckBox jCheckBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    
        public void Zacznij()
   {
        
        {
            try   
            {
                {
                    String query = "from Pojazd";
                    Session session = HibernateUtil.getSessionFactory().getCurrentSession();
                    session.beginTransaction();
                    Query q = session.createQuery(query);
                    List resultList = q.list();
                    jCBPojazd.removeAllItems();
                    for(Object o : resultList) 
                    {
                        Pojazd kod = (Pojazd)o;
                        jCBPojazd.addItem(kod);
                    }
                }
                {
                    String query = "from Adres";//meta
                    Session session = HibernateUtil.getSessionFactory().getCurrentSession();
                    session.beginTransaction();
                    Query q = session.createQuery(query);
                    List resultList = q.list();
                    JCBAdresMeta.removeAllItems();
                    for(Object o : resultList) 
                    {
                        Adres kod = (Adres)o;
                        JCBAdresMeta.addItem(kod);
                    }
                }
                {
                    String query = "from Adres";//start
                    Session session = HibernateUtil.getSessionFactory().getCurrentSession();
                    session.beginTransaction();
                    Query q = session.createQuery(query);
                    List resultList = q.list();
                    JCBAdresStart.removeAllItems();
                    for(Object o : resultList) 
                    {
                        Adres kod = (Adres)o;
                        JCBAdresStart.addItem(kod);
                    }
                }
                {
                    String query = "from Ladunek";
                    Session session = HibernateUtil.getSessionFactory().getCurrentSession();
                    session.beginTransaction();
                    Query q = session.createQuery(query);
                    List resultList = q.list();
                    jCBŁadunek.removeAllItems();
                    for(Object o : resultList) 
                    {
                        Ladunek kod = (Ladunek)o;
                        jCBŁadunek.addItem(kod);
                    }
                }
                {
                    String query = "from Pracownik";
                    Session session = HibernateUtil.getSessionFactory().getCurrentSession();
                    session.beginTransaction();
                    Query q = session.createQuery(query);
                    List resultList = q.list();
                    jCBPracownik.removeAllItems();
                    for(Object o : resultList) 
                    {
                        Pracownik kod = (Pracownik)o;
                        jCBPracownik.addItem(kod);
                    }
                }
                {
                    String query = "from Status";
                    Session session = HibernateUtil.getSessionFactory().getCurrentSession();
                    session.beginTransaction();
                    Query q = session.createQuery(query);
                    List resultList = q.list();
                    jCBStatus.removeAllItems();
                    for(Object o : resultList) 
                    {
                        Status kod = (Status)o;
                        jCBStatus.addItem(kod);
                    }
                }
                {
                    String query = "from Kontrahent";
                    Session session = HibernateUtil.getSessionFactory().getCurrentSession();
                    session.beginTransaction();
                    Query q = session.createQuery(query);
                    List resultList = q.list();
                    jCBKontrahent.removeAllItems();
                    for(Object o : resultList) 
                    {
                        Kontrahent kod = (Kontrahent)o;
                        jCBKontrahent.addItem(kod);
                    }
                }

            } 
            catch (HibernateException he) 
            {
                he.printStackTrace();
            }
       }
    
}
}
